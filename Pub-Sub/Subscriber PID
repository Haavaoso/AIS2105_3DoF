
#define _USE_MATH_DEFINES

#include <memory>

#include <ostream>
#include <chrono>     
#include "rclcpp/rclcpp.hpp"
#include "std_msgs/msg/string.hpp"
#include "std_msgs/msg/float32_multi_array.hpp"
using std::placeholders::_1;

#include "regulator.cpp"

// hyp = 22.5
// normal = 19.5
int setpoint[3] = {0, 0, 0};
float ball_pos[3] = {1, 0, 0};


double z_tuning = + 0;
double z_ = 10+z_tuning;

//Maxmin output value of pid for degree conversion
float max_pid = 10;
float min_pid = -10;

float pid_p = 1;
float pid_i = 0.2;
float pid_d = 0.1;

// Maxmin servo angles
float servo_angle_limit_max = 85;
float servo_angle_limit_min = -35;

// Maxminpitch possible by 3dof platform
int max_pitch = 5;
int min_pitch = -5;
int max_roll = 5;
int min_roll = -5;// Driver code

float servo1_ang = 90;
float servo2_ang = 90;
float servo3_ang = 90;

PID PID_X(pid_p, pid_i, pid_d);
PID PID_Y(pid_p, pid_i, pid_d);




class MinimalSubscriber : public rclcpp::Node
{
public:
  MinimalSubscriber()
      : Node("minimal_subscriber")
  {
    subscriber_ = this->create_subscription<std_msgs::msg::Float32MultiArray>(
        "topic2", 10, std::bind(&MinimalSubscriber::topic_callback, this, _1));
  }

private:
  void topic_callback(const std_msgs::msg::Float32MultiArray::SharedPtr msg) const
  {
    RCLCPP_INFO(this->get_logger(), "Coordinates recivced: [%f, %f, %f]", msg->data[0], msg->data[1], msg->data[2]);
    
    float pidx_ = PID_X.compute(setpoint[0], ball_pos[0]);
    float pidy_ = PID_Y.compute(setpoint[1], ball_pos[1]);

    // Map output of PID to table tilt
    float pitch_deg= min_pitch + ((max_pitch - min_pitch) / (max_pid - min_pid)) * (pidx_ - min_pid);
    float roll_deg = min_roll + ((max_roll - min_roll) / (max_pid - min_pid)) * (pidy_ - min_pid);
    double[3] anglee = next_servo_pos(pitch_deg, roll_deg);
    
    RCLCPP_INFO(this->get_logger(), "PID IS CRAZY: [%f, %f]", pidy_, pidx_);
    RCLCPP_INFO(this->get_logger(), "ROLL IS CRAZY: [%f, %f, %f]", anglee[0], anglee[1], anglee[2]);
  }
  rclcpp::Subscription<std_msgs::msg::Float32MultiArray>::SharedPtr subscriber_;
};

int main(int argc, char *argv[])
{
  rclcpp::init(argc, argv);
  rclcpp::spin(std::make_shared<MinimalSubscriber>());
  rclcpp::shutdown();
  return 0;
}


std::vector<double> servo_angle_outputs(double angles[3]){
  for (int i = 0; i < 3; i++){
    if (angles[i] >= servo_angle_limit_max){
      angles[i] = servo_angle_limit_max - 1;
    }
    else if (angles[i] <= servo_angle_limit_min)
    {
      angles[i] = servo_angle_limit_min + 1;
    }
  }
}

float servo_angle_limit_max = 85;
float servo_angle_limit_min = -35;
